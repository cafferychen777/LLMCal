name: Create Release

on:
  push:
    branches:
      - main
    paths:
      - 'LLMCal.popclipext/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Get version and template
        id: get_version
        run: |
          VERSION=$(date +'%Y.%m.%d.%H%M')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # Use major template if commit message includes 'BREAKING' or 'major:'
          TEMPLATE=.github/release_template_minor.md
          if git log -1 --pretty=%B | grep -Ei '(breaking|major:)'; then
            TEMPLATE=.github/release_template_major.md
          fi
          echo "template=$TEMPLATE" >> $GITHUB_OUTPUT

      - name: Create ZIP file
        run: |
          cd LLMCal.popclipext
          zip -r ../LLMCal.popclipext.zip *
          cd ..
          mv LLMCal.popclipext.zip LLMCal-latest.popclipext.zip

      - name: Build release notes body
        id: build_notes
        run: |
          TEMPLATE_FILE="${{ steps.get_version.outputs.template }}"
          BODY_FILE="release_body.md"
          cp "$TEMPLATE_FILE" "$BODY_FILE"
          echo "" >> "$BODY_FILE"

      - name: Extract short highlights from commits (recent 14 days)
        id: short_changes
        run: |
          BODY_FILE="release_body.md"
          echo "## Changes (last 14 days)" >> "$BODY_FILE"
          SINCE=$(date -d "14 days ago" +%Y-%m-%d || date -v-14d +%Y-%m-%d)
          git log --since="$SINCE" --pretty=format:"- %s (%h)" --no-merges | head -n 50 >> "$BODY_FILE"

      - name: Extract highlights (prefer PR titles)
        id: highlights
        run: |
          # Try to extract PR titles from recent merge commits
          git log -n 50 --merges --pretty=%B | awk '
            /^Merge pull request/ { flag=1; next }
            flag==1 && NF { print "- " $0; flag=0; next }
            { next }
          ' | head -n 5 > pr_highlights.txt

          if [ -s pr_highlights.txt ]; then
            sed -i '1s/^/## Highlights (PR titles)\n/' pr_highlights.txt || true
            cat pr_highlights.txt >> release_body.md
          else
            # Fallback to recent commit subjects (non-merge)
            git log -n 20 --pretty=format:"- %s" --no-merges | head -n 5 > short_highlights.txt
            sed -i '1s/^/## Highlights (auto)\n/' short_highlights.txt || true
            cat short_highlights.txt >> release_body.md
          fi

      - name: Group highlights by type
        run: |
          echo "\n## Highlights by type (auto)" >> release_body.md
          echo "\n### Features" >> release_body.md
          git log -n 50 --pretty=format:"- %s" --no-merges | grep -E '^feat' || true >> release_body.md
          echo "\n### Fixes" >> release_body.md
          git log -n 50 --pretty=format:"- %s" --no-merges | grep -E '^fix' || true >> release_body.md
          echo "\n### Chores" >> release_body.md
          git log -n 50 --pretty=format:"- %s" --no-merges | grep -E '^chore' || true >> release_body.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body_path: release_body.md
          files: |
            LLMCal-latest.popclipext.zip
          draft: false
          prerelease: false

      - name: Update repository ZIP file
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add LLMCal-latest.popclipext.zip
          git commit -m "chore: update extension package to v${{ steps.get_version.outputs.version }}" || echo "No changes to commit"
          git push
