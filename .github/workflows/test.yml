name: üß™ Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  FORCE_COLOR: 1

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üîç Lint shell scripts
      run: |
        # Install shellcheck if not available
        if ! command -v shellcheck &> /dev/null; then
          brew install shellcheck
        fi

        # Run shellcheck on all shell scripts
        find . -name "*.sh" -not -path "./node_modules/*" | xargs shellcheck -x

    - name: üß™ Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        CI: true

    - name: üìà Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: llmcal-coverage
        fail_ci_if_error: false

    - name: üìã Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: coverage/
        retention-days: 3

  security-scan:
    name: üîí Security Scan
    runs-on: macos-latest

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üîç Run npm audit
      run: npm audit --audit-level moderate

  validate:
    name: üìù Validate Extension
    runs-on: macos-latest

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üîß Validate PopClip extension
      run: |
        echo "üîß Validating PopClip extension..."

        # Check required files exist
        required_files=("Config.json" "calendar.sh" "i18n.json")
        for file in "${required_files[@]}"; do
          if [ ! -f "LLMCal.popclipext/$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done

        # Validate JSON files
        for file in $(find LLMCal.popclipext -name "*.json"); do
          if ! jq empty "$file" 2>/dev/null; then
            echo "‚ùå Invalid JSON in $file"
            exit 1
          fi
        done

        # Check calendar.sh is executable
        if [ ! -x "LLMCal.popclipext/calendar.sh" ]; then
          echo "‚ö†Ô∏è calendar.sh is not executable"
          chmod +x LLMCal.popclipext/calendar.sh
        fi

        echo "‚úÖ PopClip extension validation passed"